# Paste after RF accuracy

# Validation Curves

param_range = np.arange(1, 10, 1, dtype=int)

train_scores, test_scores = validation_curve(
    random_forest_processed,
    processed_train_X,
    processed_train_Y,
    param_name="n_estimators",
    param_range=param_range,
)

train_scores_mean = np.mean(train_scores, axis=1)
test_scores_mean = np.mean(test_scores, axis=1)

plt.plot(param_range, train_scores_mean,
         label="n_estimators_train")
plt.plot(param_range, test_scores_mean, label="n_estimators_validation")

train_scores, test_scores = validation_curve(
    random_forest_processed,
    processed_train_X,
    processed_train_Y,
    param_name="max_depth",
    param_range=param_range,
)

train_scores_mean = np.mean(train_scores, axis=1)
test_scores_mean = np.mean(test_scores, axis=1)

plt.plot(param_range, train_scores_mean,
         label="max_depth_train")
plt.plot(param_range, test_scores_mean, label="max_depth_validation")

train_scores, test_scores = validation_curve(
    random_forest_processed,
    processed_train_X,
    processed_train_Y,
    param_name="min_samples_split",
    param_range=param_range,
)

train_scores_mean = np.mean(train_scores, axis=1)
test_scores_mean = np.mean(test_scores, axis=1)

plt.plot(param_range, train_scores_mean,
         label="min_samples_split_train")
plt.plot(param_range, test_scores_mean, label="min_samples_split_validation")

train_scores, test_scores = validation_curve(
    random_forest_processed,
    processed_train_X,
    processed_train_Y,
    param_name="min_samples_leaf",
    param_range=param_range,
)

train_scores_mean = np.mean(train_scores, axis=1)
test_scores_mean = np.mean(test_scores, axis=1)

plt.plot(param_range, train_scores_mean,
         label="min_samples_leaf_train")
plt.plot(param_range, test_scores_mean, label="min_samples_leaf_validation")

train_scores, test_scores = validation_curve(
    random_forest_processed,
    processed_train_X,
    processed_train_Y,
    param_name="max_features",
    param_range=param_range,
)

train_scores_mean = np.mean(train_scores, axis=1)
test_scores_mean = np.mean(test_scores, axis=1)

plt.plot(param_range, train_scores_mean,
         label="max_features_train")
plt.plot(param_range, test_scores_mean, label="max_features_validation")

train_scores, test_scores = validation_curve(
    random_forest_processed,
    processed_train_X,
    processed_train_Y,
    param_name="max_leaf_nodes",
    param_range=param_range,
)

train_scores_mean = np.mean(train_scores, axis=1)
test_scores_mean = np.mean(test_scores, axis=1)

plt.plot(param_range, train_scores_mean,
         label="max_leaf_nodes_train")
plt.plot(param_range, test_scores_mean, label="max_leaf_nodes_validation")

plt.title("RF Preprocessed Validation Curves")
plt.xlabel("Hyperparameter Value")
plt.ylabel("Accuracy")

plt.legend()
plt.show()

# Learning Curves

train_sizes_abs, train_scores, test_scores = learning_curve(
    random_forest_smote,
    smote_train_X,
    smote_train_Y,
    train_sizes=np.linspace(0.1, 1.0, 10)
)

# train_scores_mean = np.mean(train_scores, axis=1)
test_scores_mean = np.mean(test_scores, axis=1)

# plt.plot(train_sizes_abs, train_scores_mean, label="RF SMOTE-treated training set")
plt.plot(train_sizes_abs, test_scores_mean,
         label="RF SMOTE-treated validation set")

train_sizes_abs_test, train_scores, test_scores = learning_curve(
    random_forest_smote,
    smote_test_X,
    smote_test_Y,
    train_sizes=np.linspace(0.1, 1.0, 10)
)

train_scores_mean = np.mean(train_scores, axis=1)
test_scores_mean = np.mean(test_scores, axis=1)

plt.plot(train_sizes_abs, np.mean([train_scores_mean, test_scores_mean], axis=0),
         label="RF SMOTE-treated test set")

train_sizes_abs, train_scores, test_scores = learning_curve(
    random_forest_processed,
    processed_train_X,
    processed_train_Y,
    train_sizes=np.linspace(0.1, 1.0, 10)
)
# train_scores_mean = np.mean(train_scores, axis=1)
test_scores_mean = np.mean(test_scores, axis=1)

# plt.plot(train_sizes_abs, train_scores_mean, label="RF Preprocessed training set")
plt.plot(train_sizes_abs, test_scores_mean,
         label="RF Preprocessed validation set")

train_sizes_abs_test, train_scores, test_scores = learning_curve(
    random_forest_processed,
    processed_train_X,
    processed_train_Y,
    train_sizes=np.linspace(0.1, 1.0, 10)
)

train_scores_mean = np.mean(train_scores, axis=1)
test_scores_mean = np.mean(test_scores, axis=1)

plt.plot(train_sizes_abs, np.mean([train_scores_mean, test_scores_mean], axis=0),
         label="RF Preprocessed test set")

plt.title("RF Learning Curves")
plt.xlabel("Training Set Subset Size")
plt.ylabel("Accuracy")

plt.legend()
plt.show()